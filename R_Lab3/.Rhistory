# 1. Загрузка файла с данными
customers <- read.csv("Customers.csv")
# 2. Просмотр первых строк данных с помощью head()
head(customers)
View(customers)
# 2. Просмотр первых строк данных с помощью head() и открытие в отдельном окне с помощью View()
head(risk)
risk
# 1. Загрузка файла с данными
install.packages("readr")
# 1. Загрузка файла с данными
customers <- read_csv("Customers.csv", sep=";")
# 1. Загрузка файла с данными
customers <- rea.csv("Customers.csv", sep=";")
# 1. Загрузка файла с данными
customers <- read.csv("Customers.csv", sep=";")
# 2. Просмотр первых строк данных с помощью head()
head(customers)
View(customers)
# 3. Загрузка бибилиотеки dplyr
library(dplyr)
# 3. Загрузка бибилиотеки dplyr
install.packages(dplyr)
# 3. Загрузка бибилиотеки dplyr
install.packages("dplyr")
# 3. Загрузка бибилиотеки dplyr
#install.packages("dplyr")
library(dplyr)
# 2. Просмотр первых строк данных с помощью head()
head(customers)
View(customers)
# 4. Преобразование категориальных переменных в факторы
customers$gender <- as.factor(customers$gender)
customers <- customers %>%
select(-customer_id) %>% # Удаление столбца customer_id
mutate(gender = as.numeric(gender)) # Преобразование Gender в числовой формат # Проверка изменений head(customers)
# Проверка изменений
head(customers)
# 6. Просмотр структуры данных
str(customers)
tot.withinss <- vector(mode="character", length=10)
for (i in 1:10){
customersCluster <- kmeans(iris[,1:4], center=i, nstart=20)
tot.withinss[i] <- customersCluster$tot.withinss
}
plot(1:10, tot.withinss, type="b", pch=19)
tot.withinss <- vector(mode="character", length=10)
for (i in 1:10){
customersCluster <- kmeans(iris[,1:4], center=i, nstart=20)
tot.withinss[i] <- customersCluster$tot.withinss
}
customersCluster
plot(1:10, tot.withinss, type="b", pch=19)
set.seed(42)
head(customers)
View(customers)
# 1. Загрузка файла с данными
customers <- read.csv("Customers.csv", sep=";")
# 2. Просмотр первых строк данных с помощью head()
head(customers)
View(customers)
# 3. Загрузка бибилиотеки dplyr
#install.packages("dplyr")
library(dplyr)
# 4. Преобразование категориальных переменных в факторы
customers$gender <- as.factor(customers$gender)
# 5. Удаление столбца customer_id и преобразование столбца Gender в числовые значения
customers <- customers %>%
select(-customer_id) %>% # Удаление столбца customer_id
mutate(gender = as.numeric(gender)) # Преобразование Gender в числовой формат
# Проверка изменений
head(customers)
# 6. Просмотр структуры данных
str(customers)
# 7. Метод локтя для определения количества кластеров:
tot.withinss <- vector(length = 10)
for (i in 1:10){
customCluster <- kmeans(df[, -1], centers = i, nstart = 20)
tot.withinss[i] <- customCluster$tot.withinss
}
# 1. Загрузка файла с данными
customers <- read.csv("Customers.csv", sep=";")
# 2. Просмотр первых строк данных с помощью head()
head(customers)
View(customers)
# 3. Загрузка бибилиотеки dplyr
#install.packages("dplyr")
library(dplyr)
# 4. Преобразование категориальных переменных в факторы
customers$gender <- as.factor(customers$gender)
# 5. Удаление столбца customer_id и преобразование столбца Gender в числовые значения
customers <- customers %>%
select(-customer_id) %>% # Удаление столбца customer_id
mutate(gender = as.numeric(gender)) # Преобразование Gender в числовой формат
# Проверка изменений
head(customers)
# 6. Просмотр структуры данных
str(customers)
# 7. Метод локтя для определения количества кластеров:
tot.withinss <- vector(length = 10)
for (i in 1:10){
customCluster <- kmeans(customers[, -1], centers = i, nstart = 20)
tot.withinss[i] <- customCluster$tot.withinss
}
plot(1:10, tot.withinss, type = "b", pch = 19, xlab = "Clusters", ylab = "WCSS")
# 8. Для функции set.seed() установить аргумент, равный 42
set.seed(42)
# Функция set.seed() используется для того, чтобы результаты анализа были воспроизводимы.
# Если мы запустим этот код несколько раз, результаты будут одинаковыми, так как
# генератор случайных чисел будет всегда начинать с одного и того же значения.
# 9. Кластеризация методом k-средних:
customCluster <- kmeans(customers[, -1], centers = 4, nstart = 20)
customCluster
# 10. Построение диаграммы рассеяния spending_score от age.
plot(customers$age, customers$spending_score, col =  customCluster$cluster, pch = customCluster$cluster)
points(x = customCluster$centers[, "age"],
y = customCluster$centers[, "spending_score"],
pch = 4, lwd = 2, col = "blue")
# 1. Загрузка файла с данными
customers <- read.csv("Customers.csv", sep=";")
# 2. Просмотр первых строк данных с помощью head()
head(customers)
#View(customers)
# 3. Загрузка бибилиотеки dplyr
#install.packages("dplyr")
library(dplyr)
# 4. Преобразование категориальных переменных в факторы
customers$gender <- as.factor(customers$gender)
# 5. Удаление столбца customer_id и преобразование столбца Gender в числовые значения
customers <- customers %>%
select(-customer_id) %>% # Удаление столбца customer_id
mutate(gender = as.numeric(gender)) # Преобразование Gender в числовой формат
# Проверка изменений
head(customers)
# 6. Просмотр структуры данных
str(customers)
# 7. Метод локтя для определения количества кластеров:
tot.withinss <- vector(length = 10)
for (i in 1:10){
customCluster <- kmeans(customers[, -1], centers = i, nstart = 20)
tot.withinss[i] <- customCluster$tot.withinss
}
plot(1:10, tot.withinss, type = "b", pch = 19, xlab = "Clusters", ylab = "WCSS")
# 8. Для функции set.seed() установить аргумент, равный 42:
set.seed(42)
# Функция set.seed() используется для того, чтобы результаты анализа были воспроизводимы.
# Если мы запустим этот код несколько раз, результаты будут одинаковыми, так как
# генератор случайных чисел будет всегда начинать с одного и того же значения.
# 9. Кластеризация методом k-средних:
customCluster <- kmeans(customers[, -1], centers = 4, nstart = 20)
customCluster
# 10. Построение диаграммы рассеяния spending_score от age:
plot(customers$age, customers$spending_score, col =  customCluster$cluster, pch = customCluster$cluster)
# 11. Отображение центров полученных кластеров:
points(x = customCluster$centers[, "age"],
y = customCluster$centers[, "spending_score"],
pch = 4, lwd = 2, col = "blue")
# 12. Вычисление матрицы расстояний и проведение иерархической кластеризации:
dist_matrix <- dist(customers[, -1])
dist_matrix
hclusters <- hclust(dist_matrix, method = "average")
# 13. Визуализация дендрограммы и отображение найденных кластеров:
plot(x = hclusters, labels = FALSE, hang = -1)
rect.hclust(hclusters, h = 28, border = c(2, 3, 4, 6))
# rect.hclust(hclusters, k = 4, border = c(2, 3, 4, 6))
# 14. Представление кластеров как вектор:
clusters <- cutree(tree = hclusters, k = 4)
clusters
# 15. Создание диаграммы рассеивания spending_score от age
plot(x = customers$age, y = customers$spending_score, col = clusters, pch = clusters, xlab = "Age", ylab = "Spending Score")
# 1. Загрузка файла с данными
customers <- read.csv("Customers.csv", sep=";")
# 2. Просмотр первых строк данных с помощью head()
head(customers)
#View(customers)
# 3. Загрузка бибилиотеки dplyr
#install.packages("dplyr")
library(dplyr)
# 4. Преобразование категориальных переменных в факторы
customers$gender <- as.factor(customers$gender)
# 5. Удаление столбца customer_id и преобразование столбца Gender в числовые значения
customers <- customers %>%
select(-customer_id) %>% # Удаление столбца customer_id
mutate(gender = as.numeric(gender)) # Преобразование Gender в числовой формат
# Проверка изменений
head(customers)
# 6. Просмотр структуры данных
str(customers)
# 7. Метод локтя для определения количества кластеров:
tot.withinss <- vector(length = 10)
for (i in 1:10){
customCluster <- kmeans(customers[, -1], centers = i, nstart = 20)
tot.withinss[i] <- customCluster$tot.withinss
}
plot(1:10, tot.withinss, type = "b", pch = 19, xlab = "Clusters", ylab = "WCSS")
# 8. Для функции set.seed() установить аргумент, равный 42:
set.seed(42)
# Функция set.seed() используется для того, чтобы результаты анализа были воспроизводимы.
# Если мы запустим этот код несколько раз, результаты будут одинаковыми, так как
# генератор случайных чисел будет всегда начинать с одного и того же значения.
# 9. Кластеризация методом k-средних:
customCluster <- kmeans(customers[, -1], centers = 4, nstart = 20)
customCluster
# 10. Построение диаграммы рассеяния spending_score от age:
plot(customers$age, customers$spending_score, col =  customCluster$cluster, pch = customCluster$cluster)
# 11. Отображение центров полученных кластеров:
points(x = customCluster$centers[, "age"],
y = customCluster$centers[, "spending_score"],
pch = 4, lwd = 2, col = "blue")
# 12. Вычисление матрицы расстояний и проведение иерархической кластеризации:
dist_matrix <- dist(customers[, -1])
dist_matrix
hclusters <- hclust(dist_matrix, method = "average")
# 13. Визуализация дендрограммы и отображение найденных кластеров:
plot(x = hclusters, labels = FALSE, hang = -1)
rect.hclust(hclusters, h = 28, border = c(2, 3, 4, 6))
# rect.hclust(hclusters, k = 4, border = c(2, 3, 4, 6))
# 14. Представление кластеров как вектор:
clusters <- cutree(tree = hclusters, k = 4)
clusters
# 15. Создание диаграммы рассеивания spending_score от age
plot(x = customers$age, y = customers$spending_score, col = clusters, pch = clusters, xlab = "Age", ylab = "Spending Score")
# 1. Загрузка файла с данными
customers <- read.csv("Customers.csv", sep=";")
# 2. Просмотр первых строк данных с помощью head()
head(customers)
#View(customers)
# 3. Загрузка бибилиотеки dplyr
#install.packages("dplyr")
library(dplyr)
# 4. Преобразование категориальных переменных в факторы
customers$gender <- as.factor(customers$gender)
# 5. Удаление столбца customer_id и преобразование столбца Gender в числовые значения
customers <- customers %>%
select(-customer_id) %>% # Удаление столбца customer_id
mutate(gender = as.numeric(gender)) # Преобразование Gender в числовой формат
# Проверка изменений
head(customers)
# 6. Просмотр структуры данных
str(customers)
# 7. Метод локтя для определения количества кластеров:
tot.withinss <- vector(length = 10) # - сумма квадратов расстояний внутри кластеров для разного количества кластеров.
for (i in 1:10){ # - запускает kmeans с разным числом кластеров от 1 до 10.
customCluster <- kmeans(customers[, -1], centers = i, nstart = 20)
tot.withinss[i] <- customCluster$tot.withinss
}
plot(1:10, tot.withinss, type = "b", pch = 19, xlab = "Clusters", ylab = "WCSS")
# Оптимальное число кластеров определяется с помощью метода локтя. На графике ось
# X представляет количество кластеров, а ось Y — сумму квадратов расстояний внутри
# кластеров (WCSS). Мы ищем точку, где уменьшение WCSS с увеличением числа кластеров
# значительно замедляется. Эта точка, похожая на локоть, часто указывает на
# оптимальное количество кластеров. В вашем коде выбрано 4 кластера, потому что в
# этой точке кривая начинает выравниваться.
# 8. Для функции set.seed() установить аргумент, равный 42:
set.seed(42)
# set.seed фиксирует генератор случайных чисел, чтобы результаты кластеризации были воспроизводимы.
# 9. Кластеризация методом k-средних:
customCluster <- kmeans(customers[, -1], centers = 4, nstart = 20)
customCluster
# 10. Построение диаграммы рассеяния spending_score от age:
plot(customers$age, customers$spending_score, col =  customCluster$cluster, pch = customCluster$cluster)
# 11. Отображение центров полученных кластеров:
points(x = customCluster$centers[, "age"],
y = customCluster$centers[, "spending_score"],
pch = 4, lwd = 2, col = "blue")
# 12. Вычисление матрицы расстояний и проведение иерархической кластеризации:
dist_matrix <- dist(customers[, -1]) # - вычисляет матрицу расстояний
dist_matrix
hclusters <- hclust(dist_matrix, method = "average") # - проводит иерархическую кластеризацию
# 13. Визуализация дендрограммы и отображение найденных кластеров:
plot(x = hclusters, labels = FALSE, hang = -1)
rect.hclust(hclusters, h = 28, border = c(2, 3, 4, 6)) # - добавляет прямоугольники, обозначающие кластеры.
rect.hclust(hclusters, k = 4, border = c(2, 3, 4, 6))
# 14. Представление кластеров как вектор:
clusters <- cutree(tree = hclusters, k = 4)
clusters
# cutree() разрезает дендрограмму на 4 кластера и возвращает вектор принадлежности.
# 15. Создание диаграммы рассеивания spending_score от age
plot(x = customers$age, y = customers$spending_score, col = clusters, pch = clusters, xlab = "Age", ylab = "Spending Score")
# Строится еще одна диаграмма рассеяния, где цвет и форма точек обозначают кластеры,
# найденные иерархической кластеризацией.
# 1. Загрузка файла с данными
customers <- read.csv("Customers.csv", sep=";")
# 2. Просмотр первых строк данных с помощью head()
head(customers)
#View(customers)
# 3. Загрузка бибилиотеки dplyr
#install.packages("dplyr")
library(dplyr)
# 4. Преобразование категориальных переменных в факторы
customers$gender <- as.factor(customers$gender)
# 5. Удаление столбца customer_id и преобразование столбца Gender в числовые значения
customers <- customers %>%
select(-customer_id) %>% # Удаление столбца customer_id
mutate(gender = as.numeric(gender)) # Преобразование Gender в числовой формат
# Проверка изменений
head(customers)
# 6. Просмотр структуры данных
str(customers)
# 7. Метод локтя для определения количества кластеров:
tot.withinss <- vector(length = 10) # - сумма квадратов расстояний внутри кластеров для разного количества кластеров.
for (i in 1:10){ # - запускает kmeans с разным числом кластеров от 1 до 10.
customCluster <- kmeans(customers[, -1], centers = i, nstart = 20)
tot.withinss[i] <- customCluster$tot.withinss
}
plot(1:10, tot.withinss, type = "b", pch = 19, xlab = "Clusters", ylab = "WCSS")
# Оптимальное число кластеров определяется с помощью метода локтя. На графике ось
# X представляет количество кластеров, а ось Y — сумму квадратов расстояний внутри
# кластеров (WCSS). Мы ищем точку, где уменьшение WCSS с увеличением числа кластеров
# значительно замедляется. Эта точка, похожая на локоть, часто указывает на
# оптимальное количество кластеров. В вашем коде выбрано 4 кластера, потому что в
# этой точке кривая начинает выравниваться.
# 8. Для функции set.seed() установить аргумент, равный 42:
set.seed(42)
# set.seed фиксирует генератор случайных чисел, чтобы результаты кластеризации были воспроизводимы.
# 9. Кластеризация методом k-средних:
customCluster <- kmeans(customers[, -1], centers = 4, nstart = 20)
customCluster
# 10. Построение диаграммы рассеяния spending_score от age:
plot(customers$age, customers$spending_score, col =  customCluster$cluster, pch = customCluster$cluster)
# 11. Отображение центров полученных кластеров:
points(x = customCluster$centers[, "age"],
y = customCluster$centers[, "spending_score"],
pch = 4, lwd = 2, col = "blue")
# 12. Вычисление матрицы расстояний и проведение иерархической кластеризации:
dist_matrix <- dist(customers[, -1]) # - вычисляет матрицу расстояний
dist_matrix
hclusters <- hclust(dist_matrix, method = "average") # - проводит иерархическую кластеризацию
# 13. Визуализация дендрограммы и отображение найденных кластеров:
plot(x = hclusters, labels = FALSE, hang = -1)
#rect.hclust(hclusters, h = 28, border = c(2, 3, 4, 6)) # - добавляет прямоугольники, обозначающие кластеры.
rect.hclust(hclusters, k = 4, border = c(2, 3, 4, 6))
# 14. Представление кластеров как вектор:
clusters <- cutree(tree = hclusters, k = 4)
clusters
# cutree() разрезает дендрограмму на 4 кластера и возвращает вектор принадлежности.
# 15. Создание диаграммы рассеивания spending_score от age
plot(x = customers$age, y = customers$spending_score, col = clusters, pch = clusters, xlab = "Age", ylab = "Spending Score")
# Строится еще одна диаграмма рассеяния, где цвет и форма точек обозначают кластеры,
# найденные иерархической кластеризацией.
# 1. Загрузка файла с данными
customers <- read.csv("Customers.csv", sep=";")
# 2. Просмотр первых строк данных с помощью head()
head(customers)
#View(customers)
# 3. Загрузка бибилиотеки dplyr
#install.packages("dplyr")
library(dplyr)
# 4. Преобразование категориальных переменных в факторы
customers$gender <- as.factor(customers$gender)
# 5. Удаление столбца customer_id и преобразование столбца Gender в числовые значения
customers <- customers %>%
select(-customer_id) %>% # Удаление столбца customer_id
mutate(gender = as.numeric(gender)) # Преобразование Gender в числовой формат
# Проверка изменений
head(customers)
# 6. Просмотр структуры данных
str(customers)
# 7. Метод локтя для определения количества кластеров:
tot.withinss <- vector(length = 10) # - сумма квадратов расстояний внутри кластеров для разного количества кластеров.
for (i in 1:10){ # - запускает kmeans с разным числом кластеров от 1 до 10.
customCluster <- kmeans(customers[, -1], centers = i, nstart = 20)
tot.withinss[i] <- customCluster$tot.withinss
}
plot(1:10, tot.withinss, type = "b", pch = 19, xlab = "Clusters", ylab = "WCSS")
# Оптимальное число кластеров определяется с помощью метода локтя. На графике ось
# X представляет количество кластеров, а ось Y — сумму квадратов расстояний внутри
# кластеров (WCSS). Мы ищем точку, где уменьшение WCSS с увеличением числа кластеров
# значительно замедляется. Эта точка, похожая на локоть, часто указывает на
# оптимальное количество кластеров. В вашем коде выбрано 4 кластера, потому что в
# этой точке кривая начинает выравниваться.
# 8. Для функции set.seed() установить аргумент, равный 42:
set.seed(42)
# set.seed фиксирует генератор случайных чисел, чтобы результаты кластеризации были воспроизводимы.
# 9. Кластеризация методом k-средних:
customCluster <- kmeans(customers[, -1], centers = 4, nstart = 20)
customCluster
# 10. Построение диаграммы рассеяния spending_score от age:
plot(customers$age, customers$spending_score, col =  customCluster$cluster, pch = customCluster$cluster)
# 11. Отображение центров полученных кластеров:
points(x = customCluster$centers[, "age"],
y = customCluster$centers[, "spending_score"],
pch = 4, lwd = 2, col = "blue")
# 12. Вычисление матрицы расстояний и проведение иерархической кластеризации:
dist_matrix <- dist(customers[, -1]) # - вычисляет матрицу расстояний
dist_matrix
hclusters <- hclust(dist_matrix, method = "average") # - проводит иерархическую кластеризацию
# 13. Визуализация дендрограммы и отображение найденных кластеров:
plot(x = hclusters, labels = FALSE, hang = -1)
rect.hclust(hclusters, k = 4, border = c(2, 3, 4, 6)) # - добавляет прямоугольники, обозначающие кластеры.
# 14. Представление кластеров как вектор:
clusters <- cutree(tree = hclusters, k = 4)
clusters
# cutree() разрезает дендрограмму на 4 кластера и возвращает вектор принадлежности.
# 15. Создание диаграммы рассеивания spending_score от age
plot(x = customers$age, y = customers$spending_score, col = clusters, pch = clusters, xlab = "Age", ylab = "Spending Score")
# Строится еще одна диаграмма рассеяния, где цвет и форма точек обозначают кластеры,
# найденные иерархической кластеризацией.
# 1. Загрузка файла с данными
customers <- read.csv("Customers.csv", sep=";")
# 2. Просмотр первых строк данных с помощью head()
head(customers)
#View(customers)
# 3. Загрузка бибилиотеки dplyr
#install.packages("dplyr")
library(dplyr)
# 4. Преобразование категориальных переменных в факторы
customers$gender <- as.factor(customers$gender)
# 5. Удаление столбца customer_id и преобразование столбца Gender в числовые значения
customers <- customers %>%
select(-customer_id) %>% # Удаление столбца customer_id
mutate(gender = as.numeric(gender)) # Преобразование Gender в числовой формат
# Проверка изменений
head(customers)
# 6. Просмотр структуры данных
str(customers)
# 7. Метод локтя для определения количества кластеров:
tot.withinss <- vector(length = 10) # - сумма квадратов расстояний внутри кластеров для разного количества кластеров.
for (i in 1:10){ # - запускает kmeans с разным числом кластеров от 1 до 10.
customCluster <- kmeans(customers[, -1], centers = i, nstart = 20)
tot.withinss[i] <- customCluster$tot.withinss
}
plot(1:10, tot.withinss, type = "b", pch = 19, xlab = "Clusters", ylab = "WCSS")
# Оптимальное число кластеров определяется с помощью метода локтя. На графике ось
# X представляет количество кластеров, а ось Y — сумму квадратов расстояний внутри
# кластеров (WCSS). Мы ищем точку, где уменьшение WCSS с увеличением числа кластеров
# значительно замедляется. Эта точка, похожая на локоть, часто указывает на
# оптимальное количество кластеров. В вашем коде выбрано 4 кластера, потому что в
# этой точке кривая начинает выравниваться.
# 8. Для функции set.seed() установить аргумент, равный 42:
set.seed(42)
# set.seed фиксирует генератор случайных чисел, чтобы результаты кластеризации были воспроизводимы.
# 9. Кластеризация методом k-средних:
customCluster <- kmeans(customers[, -1], centers = 4, nstart = 20)
customCluster
# Она разбивает набор данных на заданное количество кластеров, минимизируя сумму
# квадратов расстояний от каждой точки данных до центра ее кластера.[, -1]: Этот
# синтаксис отбирает все строки и все столбцы, кроме первого.
# nstart: Задает количество случайных начальных разбиений, с которых алгоритм
# будет начинать. Это помогает избежать локальных минимумов, так как алгоритм
# будет запускаться 20 раз с разными начальными позициями, и результат с наименьшей
# суммой квадратов отклонений будет выбран как итоговый.
# 10. Построение диаграммы рассеяния spending_score от age:
plot(customers$age, customers$spending_score, col =  customCluster$cluster, pch = customCluster$cluster)
# 11. Отображение центров полученных кластеров:
points(x = customCluster$centers[, "age"],
y = customCluster$centers[, "spending_score"],
pch = 4, lwd = 2, col = "blue")
# 12. Вычисление матрицы расстояний и проведение иерархической кластеризации:
dist_matrix <- dist(customers[, -1]) # - вычисляет матрицу расстояний
hclusters <- hclust(dist_matrix, method = "average") # - проводит иерархическую кластеризацию
# Матрица расстояний содержит значения расстояний между каждой парой точек данных.
# В данном случае используется метод среднего арифметического, который вычисляет
# среднее расстояние между всеми парами объектов из двух объединяемых кластеров.
# 13. Визуализация дендрограммы и отображение найденных кластеров:
plot(x = hclusters, labels = FALSE, hang = -1)
rect.hclust(hclusters, k = 4, border = c(2, 3, 4, 6)) # - добавляет прямоугольники, обозначающие кластеры.
# 14. Представление кластеров как вектор:
clusters <- cutree(tree = hclusters, k = 4)
clusters
# cutree() разрезает дендрограмму на 4 кластера и возвращает вектор принадлежности.
# 15. Создание диаграммы рассеивания spending_score от age
plot(x = customers$age, y = customers$spending_score, col = clusters, pch = clusters, xlab = "Age", ylab = "Spending Score")
# Строится еще одна диаграмма рассеяния, где цвет и форма точек обозначают кластеры,
# найденные иерархической кластеризацией.
